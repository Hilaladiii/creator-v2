generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email String @unique
  fullname String
  address String
  phone String
  isVerified Boolean @default(false)
  verificationToken String
  emailVerified DateTime?
  image String?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
    
  accounts Account[]
  proposals Proposal[]  
  orders Order[]
  reviews Review[]

}


model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId],references: [id], onDelete:Cascade)
  @@unique([provider,providerAccountId])

}

enum Status{
  WAITING
  APPROVED
  NOT_APPROVED
  WAITING_PAYMENT
  SUCCESS_PAYMENT
}

model Proposal{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  phoneNumber String
  subject String
  proposal String
  status Status @default(WAITING)

  companyId String @db.ObjectId
  company Company @relation(fields: [companyId],references: [id])
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
}

enum Category{
  TECHNOLOGY
  HEALTH
  ECONOMICS
  PSYCHOLOGY
  EDUCATION
  ENVIRONMENT
  POLITICS
}

model Company{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  description String
  photo String
  location String
  accepted Float? @default(0)
  website String
  phone String
  profile String
  rating Float? @default(0)
  totalReview Float? @default(0)

  category Category
  proposals Proposal[]
}

model Order{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  eventName String  
  eventDescription String
  eventDate DateTime
  eventTime String
  orderCode String @unique
  duration Float
  rundown String
  script String?
  bookDate DateTime @default(now()) 
  status Status @default(WAITING_PAYMENT)
  totalPrice Float
  paymentType PaymentType
  
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])

  speakerId String @db.ObjectId
  speaker Speaker @relation(fields: [speakerId],references: [id])  
  

}

enum PaymentType{
  BRI
  BCA
  GOPAY
}

model Review{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  star Int
  review String
  date DateTime @default(now())

  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])

  speakerId String @db.ObjectId
  speaker Speaker @relation(fields: [speakerId],references: [id])
  
}

model Speaker{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name String   
  description String
  photo String
  price Float
  location String
  rating Float? @default(0)
  totalReview Int? @default(0)
  portofolio String
  category Category

  orders Order[]
  reviews Review[]
  schedules Schedule[]
}

model Schedule{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  time DateTime @db.Timestamp
  date DateTime @db.Date

  speakerId String @db.ObjectId
  speaker Speaker @relation(fields: [speakerId],references: [id])
}
